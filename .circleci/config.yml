# Machine executor, set the machine key to true in .circleci/config.yml:
version: 2.1

parameters:
  gio_action:
    type: enum
    enum: [product_release, lts_support_release, sts_support_release, dev_pr_review, support_pr_review, empty_workflow]
    # the [default:] clause is required : without it, a Circle CI error will occur
    # default: none
    # the [default:] clause must have a valid value : without a valid value, a Circle CI error will occur
    default: empty_workflow
  pull_req_bot_image_tag:
    type: string
    default: '3.0.76'

orbs:
  secrethub: secrethub/cli@1.0.0
jobs:
  empty_job:
    machine:
      image: 'ubuntu-1604:201903-01'    # recommended linux image - includes Ubuntu 16.04, docker 18.09.3, docker-compose 1.23.1
      # resource_class: medium
      # docker_layer_caching: true    # default - false # requires a Circle CI plan that includes [Docker layer caching feature]
    environment:
      DESIRED_DOCKER_TAG: 5.27.1
    steps:
      - checkout
      - run:
          name: "This job is the default job invoked from pipeline parameters"
          command: |
                   echo "This job does nothing"
  pull_requests_bot_exec:
    machine:
      image: 'ubuntu-1604:201903-01'    # recommended linux image - includes Ubuntu 16.04, docker 18.09.3, docker-compose 1.23.1
      # resource_class: medium
      # docker_layer_caching: true    # default - false # requires a Circle CI plan that includes [Docker layer caching feature]
    environment:
      DESIRED_DOCKER_TAG: 5.27.1
      PIPELINE_PARAM_GIO_ACTION: << pipeline.parameters.gio_action >>
      PIPELINE_PARAM_PR_BOT_IMAGE_TAG: << pipeline.parameters.pull_req_bot_image_tag >>
    steps:
      - checkout
      - secrethub/install
      - run:
          name: "Running Pull Request Bot"
          command: |
                   echo "This job will run the pull request bot, in its docker image "
                   echo "The pull request bot workflow is the only one which does not require any pipeline parameter."
                   echo "The Pull Request Bot will be triggered with any new commit, and will ignore all commits events"
                   echo "The Pull Request Bot will be able to detect if the event triggering the pipeline was a commit or a pull request, by inspecting the Circle CI [CIRCLE_PULL_REQUEST] native env. var. "
                   echo " ---"
                   echo "Here is the value of the Circle CI [CIRCLE_PULL_REQUEST] native env. var. : "
                   echo " ---"
                   echo "[${CIRCLE_PULL_REQUEST}] "
                   echo " ---"
                   echo "Here is the checked out git branch, and the last commit that branch : "
                   echo " ---"
                   echo "CHECKED OUT GIT BRANCH IS : [${CIRCLE_BRANCH}] "
                   echo "LAST COMMIT ON THIS BRANCH IS : [$(git rev-parse ${CIRCLE_BRANCH})] "
                   echo "Circle CI [CIRCLE_SHA1] value is [${CIRCLE_SHA1}]"
                   echo " ---"
                   echo "COMMIT HASH associated with the [${CIRCLE_PULL_REQUEST}] Pull Request IS : "
                   echo ""
                   echo " Use github API v4 (GraphQL ), see https://docs.github.com/en/graphql/reference/objects#pullrequest"
                   echo ""
                   echo " ---"
                   echo " Note : the [CIRCLE_PULL_REQUEST] env. var. will, even for a commit event, display"
                   echo "        the HTTP Link to the latest opened pull request. Now we the bot can detect if"
                   echo "        the triggering event was this last pull request, or a git commit, comparing the last"
                   echo "        commit on current bracnh in the pipeline, and the git commit ID of the pull request"
                   echo " ---"
                   echo "Here is the value of the Circle CI Pipeline Parameters [CIRCLE_PARAMETERS] native env. var. : "
                   echo " ---"
                   echo "PIPELINE_PARAM_GIO_ACTION=[${PIPELINE_PARAM_GIO_ACTION}] "
                   echo "PIPELINE_PARAM_PR_BOT_IMAGE_TAG=[${PIPELINE_PARAM_PR_BOT_IMAGE_TAG}] "
                   echo " ---"
                   echo " ---"
                   echo "The pull request bot will trigger either of [dev_pr_job1] or [support_pr_job1], using the [gio_action] pipeline parameter, depending on"
                   echo "the name of the source branch of the Pull Request. So bot will have to detect git branch ...(a condition)"

  product_release_job1:
    machine:
      image: 'ubuntu-1604:201903-01'    # recommended linux image - includes Ubuntu 16.04, docker 18.09.3, docker-compose 1.23.1
      # resource_class: medium
      # docker_layer_caching: true    # default - false # requires a Circle CI plan that includes [Docker layer caching feature]
    environment:
      DESIRED_DOCKER_TAG: 5.27.1
    steps:
      - checkout
      - secrethub/install
      - run:
          name: "YET ANOTHER TEST WORKFLOW for Product Release"
          command: |
               echo "YET ANOTHER TEST WORKFLOW for Product Release"
  LTS_release_job1:
    machine:
      image: 'ubuntu-1604:201903-01'    # recommended linux image - includes Ubuntu 16.04, docker 18.09.3, docker-compose 1.23.1
      # resource_class: medium
      # docker_layer_caching: true    # default - false # requires a Circle CI plan that includes [Docker layer caching feature]
    environment:
      DESIRED_DOCKER_TAG: 5.27.1
    steps:
      - checkout
      - secrethub/install
      - run:
          name: "A FIRST TEST JOB for LTS Support Release"
          command: |
               echo "A FIRST TEST JOB for LTS Support Release"
  STS_release_job1:
    machine:
      image: 'ubuntu-1604:201903-01'    # recommended linux image - includes Ubuntu 16.04, docker 18.09.3, docker-compose 1.23.1
      # resource_class: medium
      # docker_layer_caching: true    # default - false # requires a Circle CI plan that includes [Docker layer caching feature]
    environment:
      DESIRED_DOCKER_TAG: 5.27.1
    steps:
      - checkout
      - secrethub/install
      - run:
          name: "A FIRST TEST JOB for STS Support Release"
          command: |
               echo "A FIRST TEST JOB for STS Support Release"
  dev_pr_job1:
    machine:
      image: 'ubuntu-1604:201903-01'    # recommended linux image - includes Ubuntu 16.04, docker 18.09.3, docker-compose 1.23.1
      # resource_class: medium
      # docker_layer_caching: true    # default - false # requires a Circle CI plan that includes [Docker layer caching feature]
    environment:
      DESIRED_DOCKER_TAG: 5.27.1
    steps:
      - checkout
      - secrethub/install
      - run:
          name: "A FIRST TEST JOB for Dev Pull Request Review"
          command: |
               echo "A FIRST TEST JOB for Dev Pull Request Review"
  support_pr_job1:
    machine:
      image: 'ubuntu-1604:201903-01'    # recommended linux image - includes Ubuntu 16.04, docker 18.09.3, docker-compose 1.23.1
      # resource_class: medium
      # docker_layer_caching: true    # default - false # requires a Circle CI plan that includes [Docker layer caching feature]
    environment:
      DESIRED_DOCKER_TAG: 5.27.1
    steps:
      - checkout
      - secrethub/install
      - run:
          name: "A FIRST TEST JOB for Support Pull Request Review"
          command: |
               echo "A FIRST TEST JOB for Support Pull Request Review"

workflows:
  version: 2.1
  pull_requests_bot:
    jobs:
      - pull_requests_bot_exec:
          context: gravitee-lab
  product_release:
    when:
      equal: [ product_release, << pipeline.parameters.gio_action >> ]
    jobs:
      - product_release_job1:
          context: gravitee-lab
          # filters:
            # will run only when on master branch, with a release tag
            # branches:
              # will not run on pull requests from
              # dev or support team
              # only:
                # - master
                # - 1.20.x
                # - 1.25.x
                # - 1.30.x
                # - 3.0.x
                # - 3.1.x
                # - /^*.x/
              # ignore:
                # - /^fix*/
                # - /^issues*/
                # - /^*support/
                # - /^*snyk*/
                # - /^*dependabot*/

  LTS_release:
    when:
      equal: [ lts_support_release, << pipeline.parameters.gio_action >> ]
    jobs:
      - LTS_release_job1:
          context: gravitee-lab
  STS_release:
    when:
      equal: [ sts_support_release, << pipeline.parameters.gio_action >> ]
    jobs:
      - STS_release_job1:
          context: gravitee-lab
  support_pr_review:
    when:
      equal: [ support_pr_review, << pipeline.parameters.gio_action >> ]
    jobs:
      - support_pr_job1:
          context: gravitee-lab
  dev_pr_review:
    when:
      equal: [ dev_pr_review, << pipeline.parameters.gio_action >> ]
    jobs:
      - dev_pr_job1:
          context: gravitee-lab
          # filters:
  empty_workflow:
    when:
      equal: [ empty_workflow, << pipeline.parameters.gio_action >> ]
    jobs:
      - empty_job:
          context: gravitee-lab
